set nocompatible
syntax on
set encoding=utf8

" provider config
" TODO I really doubt this is portable
let g:python_host_prog  = '/usr/local/opt/python2/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'


""" START VUNDLE CONFIG
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle manages itself
Plugin 'VundleVim/Vundle.vim'

" vim-vinegar enhances netrw
Plugin 'tpope/vim-vinegar'

Plugin 'junegunn/fzf.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'majutsushi/tagbar'

Plugin 'luochen1990/rainbow'
Plugin 'marciomazza/vim-brogrammer-theme'
Plugin 'vim-scripts/summerfruit256.vim'

Plugin 'tpope/vim-surround'
Plugin 'jiangmiao/auto-pairs'
Plugin 'tpope/vim-endwise'
Plugin 'tomtom/tcomment_vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'vim-scripts/StripWhiteSpaces'

Plugin 'janko-m/vim-test'
Plugin 'tpope/vim-dispatch'

" snipmate and dependencies
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

" ycm
Plugin 'Valloric/YouCompleteMe'

" enhanced selectors
Plugin 'tmhedberg/matchit'
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'lucapette/vim-textobj-underscore'

" git
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
" github
Plugin 'tpope/vim-rhubarb'

" ruby
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rails'

" go
Plugin 'fatih/vim-go'

" html
Plugin 'mattn/emmet-vim'

" javascript
Plugin 'pangloss/vim-javascript'
Plugin 'leafgarland/typescript-vim'
Plugin 'Quramy/tsuquyomi'
Plugin 'mxw/vim-jsx'
Plugin 'nikvdp/ejs-syntax'
Plugin 'MaxMEllon/vim-jsx-pretty'

Plugin 'sirtaj/vim-openscad'

call vundle#end()
filetype plugin indent on
""" END VUNDLE CONFIG

set noerrorbells novisualbell
set number relativenumber

let mapleader = ","
inoremap jj <esc>
inoremap JJ <esc>

" nvim terminal
nnoremap <leader>T :terminal<CR>
tnoremap jj <c-\><c-n>

" airline config
let g:airline_powerline_fonts = 1

" ycm config
"  disable tab for completions so it won't conflict with snipmate
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

" vim-jsx config
let g:jsx_ext_required = 0

" StripWhiteSpaces config
let g:strip_trailing_lines = 1

" vim-fugitive config
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gn :GitGutterNextHunk<CR>
nnoremap <leader>gp :GitGutterPrevHunk<CR>

" vim-bundle config
command! Dbundle Dispatch bundle

" vim-test config
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
let test#strategy = "dispatch"
let test#ruby#rspec#executable = 'bundle exec rspec'
let test#java#maventest#options = "-DfailIfNoTests=false"

" make / dispatch mappings
nmap <silent> <leader>m :Dispatch make
nmap <silent> <leader>mm :Dispatch make<CR>

" autosave buffers when focus is lost
" (ignores warnings from unnamed buffers)
autocmd FocusLost * silent! wa

" persistent undo history
set undodir=~/.vim/undo
set undofile

" fzf
if executable('fzf')
  set rtp+=/usr/local/opt/fzf

  nnoremap <leader>p :FZF<CR>
  nnoremap <leader>? :Commands<CR>
  nnoremap <leader>r :FZFTags<CR>

  " tag search borrowed from (https://github.com/junegunn/fzf/wiki/Examples-(vim)#jump-to-tags-in-the-current-buffer)
  function! s:align_lists(lists)
    let maxes = {}
    for list in a:lists
      let i = 0
      while i < len(list)
        let maxes[i] = max([get(maxes, i, 0), len(list[i])])
        let i += 1
      endwhile
    endfor
    for list in a:lists
      call map(list, "printf('%-'.maxes[v:key].'s', v:val)")
    endfor
    return a:lists
  endfunction

  " TODO: use existing tags file, and generate if it doesn't exist
  function! s:fzf_tags_source()
    let lines = map(split(system(printf(
          \ 'ctags -f - --sort=no --excmd=number --language-force=%s %s',
          \ &filetype, expand('%:S'))), "\n"), 'split(v:val, "\t")')
    if v:shell_error
      throw 'failed to extract tags'
    endif
    return map(s:align_lists(lines), 'join(v:val, "\t")')
  endfunction

  function! s:btags_sink(line)
    execute split(a:line, "\t")[2]
  endfunction

  function! s:fzf_tags()
    try
      call fzf#run({
            \ 'source':  s:fzf_tags_source(),
            \ 'options': '+m -d "\t" --with-nth 1,4.. -n 1 --tiebreak=index',
            \ 'down':    '40%',
            \ 'sink':    function('s:btags_sink')})
    catch
      echohl WarningMsg
      echom v:exception
      echohl None
    endtry
  endfunction

  command! FZFTags call s:fzf_tags()
endif

" silent wrapper
" (courtesy of https://vi.stackexchange.com/a/1958)
:command! -nargs=1 Silent execute ':silent !'.<q-args> | execute ':redraw!'

" toggle word wrap
set nowrap linebreak nolist
nnoremap <leader>W :Wrap<CR>
command! -nargs=* Wrap set wrap!

" open tab and set local working directory in first window
" (effectively, this should mean that every window opened in that tab will use
" the local working directory)
" FIXME: lcd can't cd to a file and errors out -- need to strip the file from
" the end of the path before passing to lcd
command! -nargs=? -complete=file Tab silent! :tabe <args> | :lcd <args>
nnoremap <leader>E :Tab<SPACE>

" ctags
command! GenerateCtags call GenerateCtags()
function! GenerateCtags()
  if executable('ctags')
    execute 'Silent ctags -R > /dev/null &'
  endif
endfunction

" indentation stuff
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent smartindent

" more natural backspace behaviour
set backspace=indent,eol,start

" set swap file directory to keep git working directories clean
set directory=$HOME/.vim/swapfiles//

" reindent entire file
map <leader>= mzgg=G`z

" search settings
set hlsearch incsearch ignorecase
nmap <silent> <leader>/ :nohlsearch<CR>

" Use ag for search
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<SPACE>
endif

" search cwd for highlighted word
nnoremap <silent> <leader>* :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" join lines with comma delimiter
nnoremap <leader>J :s/\n/, /<CR>

" more natural window splitting
set splitbelow
set splitright
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" diff colors
highlight DiffAdd    ctermfg=40    ctermbg=240  cterm=NONE
highlight DiffChange ctermfg=190   ctermbg=240  cterm=NONE
highlight DiffDelete ctermfg=196   ctermbg=240  cterm=NONE
highlight DiffText   ctermfg=NONE  ctermbg=NONE cterm=reverse

" .vimrc editing shortcuts
noremap <leader>ev :tabnew $MYVIMRC<CR>
noremap <leader>sv :source $MYVIMRC<CR>
