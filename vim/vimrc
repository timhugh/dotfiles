set nocompatible
syntax on
set encoding=utf8
colorscheme delek
set noerrorbells novisualbell

let mapleader=","
inoremap jj <esc>
inoremap JJ <esc>
noremap [[ <esc>


""" START VUNDLE CONFIG
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle manages itself
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-vinegar'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'tpope/vim-surround'
Plugin 'jiangmiao/auto-pairs'
Plugin 'tpope/vim-endwise'
Plugin 'tomtom/tcomment_vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'vim-scripts/StripWhiteSpaces'

" snipmate and dependencies
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

" enhanced selectors
Plugin 'tmhedberg/matchit'
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'lucapette/vim-textobj-underscore'

" git
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rhubarb'
Plugin 'tommcdo/vim-fubitive'
Plugin 'airblade/vim-gitgutter'

" writing
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

" ruby
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rails'
Plugin 'thoughtbot/vim-rspec'

" go
Plugin 'fatih/vim-go'

" crystal
Plugin 'rhysd/vim-crystal'

" javascript
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

" confluence
Plugin 'vim-scripts/confluencewiki.vim'

call vundle#end()
filetype plugin indent on
""" END VUNDLE CONFIG


""" START PLUGIN CONFIG

" goyo / limelight config
nnoremap <leader>G :Goyo<CR>
let g:goyo_width = 120
let g:limelight_conceal_ctermfg = 'gray'
function! s:goyo_enter()
  set wrap
  Limelight
endfunction
function! s:goyo_leave()
  set nowrap
  Limelight!
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" vim-jsx config
let g:jsx_ext_required = 0

" StripWhiteSpaces config
let g:strip_trailing_lines = 1

" vim-fugitive config
nnoremap <leader>gl :Glog<CR>:copen<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gn :GitGutterNextHunk<CR>
nnoremap <leader>gp :GitGutterPrevHunk<CR>

""" END PLUGIN CONFIG

" autosave buffers when focus is lost
" (ignores warnings from unnamed buffers)
autocmd FocusLost * silent! wa

" set dictionary for autocomplete
set dictionary+=/usr/share/dict/words
set dictionary+=~/.vim/dictionary
set complete+=k

" fzf
if executable('fzf')
  nnoremap <leader>t :FZF<CR>
  nnoremap <leader>r :FZFTags<CR>
  set rtp+=/usr/local/opt/fzf

  " tag search borrowed from (https://github.com/junegunn/fzf/wiki/Examples-(vim)#jump-to-tags-in-the-current-buffer)
  function! s:align_lists(lists)
    let maxes = {}
    for list in a:lists
      let i = 0
      while i < len(list)
        let maxes[i] = max([get(maxes, i, 0), len(list[i])])
        let i += 1
      endwhile
    endfor
    for list in a:lists
      call map(list, "printf('%-'.maxes[v:key].'s', v:val)")
    endfor
    return a:lists
  endfunction

  " TODO: use existing tags file, and generate if it doesn't exist
  function! s:fzf_tags_source()
    let lines = map(split(system(printf(
          \ 'ctags -f - --sort=no --excmd=number --language-force=%s %s',
          \ &filetype, expand('%:S'))), "\n"), 'split(v:val, "\t")')
    if v:shell_error
      throw 'failed to extract tags'
    endif
    return map(s:align_lists(lines), 'join(v:val, "\t")')
  endfunction

  function! s:btags_sink(line)
    execute split(a:line, "\t")[2]
  endfunction

  function! s:fzf_tags()
    try
      call fzf#run({
            \ 'source':  s:fzf_tags_source(),
            \ 'options': '+m -d "\t" --with-nth 1,4.. -n 1 --tiebreak=index',
            \ 'down':    '40%',
            \ 'sink':    function('s:btags_sink')})
    catch
      echohl WarningMsg
      echom v:exception
      echohl None
    endtry
  endfunction

  command! FZFTags call s:fzf_tags()
endif

" silent wrapper
" (courtesy of https://vi.stackexchange.com/a/1958)
:command! -nargs=1 Silent execute ':silent !'.<q-args> | execute ':redraw!'

" toggle word wrap
set nowrap linebreak nolist
nnoremap <leader>W :Wrap<CR>
command! -nargs=* Wrap set wrap!

" open tab and set local working directory in first window
" (effectively, this should mean that every window opened in that tab will use
" the local working directory)
" FIXME: lcd can't cd to a file and errors out -- need to strip the file from
" the end of the path before passing to lcd
command! -nargs=? -complete=file Tab silent! :tabe <args> | :lcd <args>
nnoremap <leader>E :Tab<SPACE>

" auto display line numbers in active buffer
set relativenumber

" ctags
command! GenerateCtags call GenerateCtags()
function! GenerateCtags()
  if executable('ctags')
    execute 'Silent ctags -R > /dev/null &'
  endif
endfunction

" indentation stuff
set tabstop=2
set shiftwidth=2
set expandtab autoindent smartindent

" more natural backspace behaviour
set backspace=indent,eol,start

" set swap file directory to keep git working directories clean
set directory=$HOME/.vim/swapfiles//

" clipboard shortcuts
nnoremap Y "*y
nnoremap <leader>p "*p
nnoremap <leader>P "*P

" search settings
set hlsearch incsearch ignorecase
nmap <silent> <leader>/ :nohlsearch<CR>

" Use ag for search
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<SPACE>
endif

" search cwd for highlighted word
nnoremap <silent> <leader>* :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" join lines with comma delimiter
nnoremap <leader>J :s/\n/, /<CR>

" more natural window splitting
set splitbelow
set splitright
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" .vimrc editing shortcuts
noremap <leader>ev :tabnew $MYVIMRC<CR>
noremap <leader>sv :source $MYVIMRC<CR>

" diff colors
highlight DiffAdd    ctermfg=40    ctermbg=240  cterm=NONE
highlight DiffChange ctermfg=190   ctermbg=240  cterm=NONE
highlight DiffDelete ctermfg=196   ctermbg=240  cterm=NONE
highlight DiffText   ctermfg=NONE  ctermbg=NONE cterm=reverse
