'use babel';
import React from 'preact-compat';
import * as Analytics from '../stepsize/Analytics';
var EBuildStatusState;
(function (EBuildStatusState) {
    EBuildStatusState["Success"] = "Success";
    EBuildStatusState["Failure"] = "Failure";
    EBuildStatusState["Unknown"] = "Unknown";
})(EBuildStatusState || (EBuildStatusState = {}));
class BuildStatus extends React.PureComponent {
    getStatus() {
        if (this.props.buildStatus) {
            return this.props.buildStatus.state;
        }
        return null;
    }
    static renderIcon(state) {
        switch (state) {
            case EBuildStatusState.Success:
                return React.createElement("i", { className: "icon icon-check", style: { color: '#2cbe4e' } });
            case EBuildStatusState.Failure:
                return React.createElement("i", { className: "icon icon-x", style: { color: '#cb2431' } });
            default:
                return null;
        }
    }
    clickHandler(label) {
        return () => {
            Analytics.track(`Clicked link`, { label });
        };
    }
    render() {
        if (this.props.buildStatus) {
            return (React.createElement("a", { onClick: this.clickHandler('Build status'), href: this.props.buildStatus.buildSources[0].url, className: "build-status", title: this.props.buildStatus.buildSources[0].description }, BuildStatus.renderIcon(this.getStatus())));
        }
        return null;
    }
}
export default BuildStatus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVpbGRTdGF0dXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY29tcG9uZW50cy9CdWlsZFN0YXR1cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDO0FBRVosT0FBTyxLQUFLLE1BQU0sZUFBZSxDQUFDO0FBQ2xDLE9BQU8sS0FBSyxTQUFTLE1BQU0sdUJBQXVCLENBQUM7QUFFbkQsSUFBSyxpQkFJSjtBQUpELFdBQUssaUJBQWlCO0lBQ3BCLHdDQUFtQixDQUFBO0lBQ25CLHdDQUFtQixDQUFBO0lBQ25CLHdDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFKSSxpQkFBaUIsS0FBakIsaUJBQWlCLFFBSXJCO0FBY0QsaUJBQWtCLFNBQVEsS0FBSyxDQUFDLGFBQXdDO0lBRTlELFNBQVM7UUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUN0QyxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQWE7UUFDckMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNkLEtBQUssaUJBQWlCLENBQUMsT0FBTztnQkFDNUIsTUFBTSxDQUFDLDJCQUFHLFNBQVMsRUFBQyxpQkFBaUIsRUFBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEdBQUksQ0FBQztZQUN4RSxLQUFLLGlCQUFpQixDQUFDLE9BQU87Z0JBQzVCLE1BQU0sQ0FBQywyQkFBRyxTQUFTLEVBQUMsYUFBYSxFQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBSSxDQUFDO1lBQ3BFO2dCQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztJQUNILENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYTtRQUN4QixNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFHRCxNQUFNO1FBQ0osRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxDQUNMLDJCQUNFLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxFQUMxQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFDaEQsU0FBUyxFQUFDLGNBQWMsRUFDeEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLElBRXhELFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQ3ZDLENBQ0wsQ0FBQztRQUNKLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsZUFBZSxXQUFXLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3ByZWFjdC1jb21wYXQnO1xuaW1wb3J0ICogYXMgQW5hbHl0aWNzIGZyb20gJy4uL3N0ZXBzaXplL0FuYWx5dGljcyc7XG5cbmVudW0gRUJ1aWxkU3RhdHVzU3RhdGUge1xuICBTdWNjZXNzID0gJ1N1Y2Nlc3MnLFxuICBGYWlsdXJlID0gJ0ZhaWx1cmUnLFxuICBVbmtub3duID0gJ1Vua25vd24nLFxufVxuXG5pbnRlcmZhY2UgSUJ1aWxkU3RhdHVzUHJvcHMge1xuICBidWlsZFN0YXR1czoge1xuICAgIHN0YXRlOiBFQnVpbGRTdGF0dXNTdGF0ZTtcbiAgICBidWlsZFNvdXJjZXM6IEFycmF5PHtcbiAgICAgIHN0YXRlOiBFQnVpbGRTdGF0dXNTdGF0ZTtcbiAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICB1cmw6IHN0cmluZztcbiAgICAgIGR1cmF0aW9uPzogbnVtYmVyO1xuICAgIH0+O1xuICB9XG59XG5cbmNsYXNzIEJ1aWxkU3RhdHVzIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJQnVpbGRTdGF0dXNQcm9wcywgb2JqZWN0PiB7XG5cbiAgcHJpdmF0ZSBnZXRTdGF0dXMoKSA6IHN0cmluZyB8IG51bGwge1xuICAgIGlmICh0aGlzLnByb3BzLmJ1aWxkU3RhdHVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5idWlsZFN0YXR1cy5zdGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZW5kZXJJY29uKHN0YXRlOiBzdHJpbmcpIDogSlNYLkVsZW1lbnQgfCBudWxsIHtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIEVCdWlsZFN0YXR1c1N0YXRlLlN1Y2Nlc3M6XG4gICAgICAgIHJldHVybiA8aSBjbGFzc05hbWU9XCJpY29uIGljb24tY2hlY2tcIiBzdHlsZT17eyBjb2xvcjogJyMyY2JlNGUnIH19IC8+O1xuICAgICAgY2FzZSBFQnVpbGRTdGF0dXNTdGF0ZS5GYWlsdXJlOlxuICAgICAgICByZXR1cm4gPGkgY2xhc3NOYW1lPVwiaWNvbiBpY29uLXhcIiBzdHlsZT17eyBjb2xvcjogJyNjYjI0MzEnIH19IC8+O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgY2xpY2tIYW5kbGVyKGxhYmVsOiBzdHJpbmcpe1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBBbmFseXRpY3MudHJhY2soYENsaWNrZWQgbGlua2AsIHtsYWJlbH0pO1xuICAgIH07XG4gIH1cblxuXG4gIHJlbmRlcigpIHtcbiAgICBpZih0aGlzLnByb3BzLmJ1aWxkU3RhdHVzKXtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxhXG4gICAgICAgICAgb25DbGljaz17dGhpcy5jbGlja0hhbmRsZXIoJ0J1aWxkIHN0YXR1cycpfVxuICAgICAgICAgIGhyZWY9e3RoaXMucHJvcHMuYnVpbGRTdGF0dXMuYnVpbGRTb3VyY2VzWzBdLnVybH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJidWlsZC1zdGF0dXNcIlxuICAgICAgICAgIHRpdGxlPXt0aGlzLnByb3BzLmJ1aWxkU3RhdHVzLmJ1aWxkU291cmNlc1swXS5kZXNjcmlwdGlvbn1cbiAgICAgICAgPlxuICAgICAgICAgIHtCdWlsZFN0YXR1cy5yZW5kZXJJY29uKHRoaXMuZ2V0U3RhdHVzKCkpfVxuICAgICAgICA8L2E+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdWlsZFN0YXR1c1xuIl19