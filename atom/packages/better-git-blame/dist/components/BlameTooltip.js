'use babel';
import React from 'preact-compat';
import moment from 'moment';
import AgeSection from './AgeSection';
import BuildStatus from './BuildStatus';
import SearchInLayer from './SearchInLayer';
import * as ConfigManager from '../ConfigManager';
import * as Analytics from '../stepsize/Analytics';
import * as IntegrationNotification from '../interface/IntegrationNotification';
class BlameTooltip extends React.PureComponent {
    constructor(...props) {
        super(...props);
        Analytics.track('Tooltip shown', { type: 'blame' });
        IntegrationNotification.trackTooltipShown();
    }
    clickLayerSearch() {
        this.props.emitter.emit('clickedSearch');
    }
    mouseEnterLayerSearch() {
        this.props.emitter.emit('mouseEnterLayerSearch');
    }
    mouseLeaveLayerSearch() {
        this.props.emitter.emit('mouseLeaveLayerSearch');
    }
    clickHandler(label) {
        return () => {
            Analytics.track(`Clicked link`, { label });
        };
    }
    render() {
        const commitedDate = moment(this.props.commit.commitedAt).format('D MMM');
        return (React.createElement("div", { className: "layer-tooltip" },
            React.createElement("div", { className: "section" },
                React.createElement("div", { className: "section-icon" },
                    React.createElement("div", { className: "icon icon-git-commit" })),
                React.createElement("div", { className: "section-content" },
                    React.createElement("h1", { className: "section-title" },
                        React.createElement("a", { onClick: this.clickHandler('Commit title'), href: `${this.props.metadata.repoCommitUrl}/${this.props.commit.commitHash}` }, this.props.commit.subject)),
                    React.createElement(BuildStatus, { buildStatus: this.props.commit.buildStatus }),
                    React.createElement("p", { className: "section-body" },
                        React.createElement("code", null,
                            React.createElement("button", { class: 'commit-hash-link', title: 'Copy commit hash to clipboard', onClick: () => {
                                    this.clickHandler('Commit hash');
                                    atom.clipboard.write(this.props.commit.commitHash);
                                    const notif = atom.notifications.addSuccess('Copied commit hash to your clipboard!', { dismissable: true });
                                    setTimeout(() => notif.dismiss(), 800);
                                } }, this.props.commit.commitHash.substr(0, 6))),
                        " by ",
                        this.props.commit.author,
                        " committed on ",
                        commitedDate),
                    React.createElement("span", { className: "section-status" },
                        React.createElement("span", { title: "Insertions", className: "green" },
                            "+",
                            this.props.commit.insertions,
                            "\u00A0"),
                        React.createElement("span", { title: "Deletions", className: "red" },
                            "-",
                            this.props.commit.deletions,
                            "\u00A0"),
                        React.createElement("span", { title: "Files Changed" },
                            React.createElement("i", { className: "icon icon-diff" }),
                            this.props.commit.filesChanged)))),
            this.props.pullRequests.map((pullRequest) => {
                const actor = pullRequest.author.username || pullRequest.author.name;
                const verb = pullRequest.state === 'Open' ? 'opened' : pullRequest.state.toLowerCase();
                const verbedAt = verb === 'merged' ? pullRequest.mergedAt : pullRequest.createdAt;
                return (React.createElement("div", { className: "section" },
                    React.createElement("div", { className: "section-icon" },
                        React.createElement("div", { className: "icon icon-git-pull-request" })),
                    React.createElement("div", { className: "section-content" },
                        React.createElement("h1", { className: "section-title" },
                            React.createElement("a", { onClick: this.clickHandler('Pull Request title'), href: pullRequest.url }, pullRequest.title)),
                        React.createElement(BuildStatus, { buildStatus: pullRequest.buildStatus }),
                        React.createElement("p", { className: "section-body" },
                            React.createElement("code", null,
                                React.createElement("a", { onClick: this.clickHandler('Pull Request number'), href: pullRequest.url },
                                    pullRequest.source === 'GitLab' ? '!' : '#',
                                    pullRequest.number)),
                            " by ",
                            actor,
                            " ",
                            verb,
                            " on ",
                            moment(verbedAt).format('D MMM')),
                        React.createElement("span", { className: "section-status" },
                            React.createElement("span", { title: "Total Commits" },
                                React.createElement("i", { className: "icon icon-git-commit" }),
                                pullRequest.commitCount)))));
            }),
            this.props.issues.map((issue) => {
                const assignee = issue.assignees && issue.assignees[0] ? issue.assignees[0].username : null;
                if (issue.source === 'GitHub' || issue.source === 'GitLab') {
                    let issueIcon = 'icon icon-issue-opened green';
                    if (issue.state === 'Closed') {
                        issueIcon = 'icon icon-issue-closed red';
                    }
                    return (React.createElement("div", { className: "section" },
                        React.createElement("div", { className: "section-icon" },
                            React.createElement("div", { className: "icon icon-issue-opened" })),
                        React.createElement("div", { className: "section-content" },
                            React.createElement("h1", { className: "section-title" },
                                React.createElement("a", { onClick: this.clickHandler('Issue title'), href: issue.url }, issue.title)),
                            React.createElement("p", { className: "section-body" },
                                React.createElement("i", { className: `icon ${issueIcon}` }),
                                React.createElement("code", null,
                                    React.createElement("a", { onClick: this.clickHandler('Issue number'), href: issue.url },
                                        "#",
                                        issue.key)),
                                " created by ",
                                issue.author.username || issue.author.name,
                                assignee ? ` & assigned to ${assignee}` : ''),
                            React.createElement("span", { className: "section-status" }, issue.state === 'Opened' ? 'open' : issue.state))));
                }
                else if (issue.source === 'Jira') {
                    return (React.createElement("div", { className: "section" },
                        React.createElement("div", { className: "section-icon" },
                            React.createElement("div", { className: "icon stepsize-icon-jira" })),
                        React.createElement("div", { className: "section-content" },
                            React.createElement("h1", { className: "section-title" },
                                React.createElement("a", { onClick: this.clickHandler('Jira ticket title'), href: issue.url }, issue.title)),
                            React.createElement("p", { className: "section-body" },
                                React.createElement("img", { className: "icon", src: issue.type.iconUrl, alt: issue.type.name }),
                                React.createElement("code", null,
                                    React.createElement("a", { onClick: this.clickHandler('Jira ticket key'), href: issue.url }, issue.key)),
                                " created by ",
                                issue.author.username,
                                assignee ? ` & assigned to ${assignee}` : '',
                                React.createElement("span", { className: "section-status", style: {
                                        color: `${issue.state.colour}`
                                    } }, issue.state.name)))));
                }
            }),
            !ConfigManager.get('displayAgeSection') ?
                null :
                React.createElement("div", { className: "section" },
                    React.createElement("div", { className: "section-icon" },
                        React.createElement("div", { className: "icon icon-clock" })),
                    React.createElement("div", { className: "section-content" },
                        React.createElement(AgeSection, { commitDay: this.props.commitDay, firstCommitDate: this.props.firstCommitDate, commit: this.props.commit }))),
            React.createElement(SearchInLayer, { onClick: this.clickLayerSearch.bind(this), onMouseEnter: this.mouseEnterLayerSearch.bind(this), onMouseLeave: this.mouseLeaveLayerSearch.bind(this) })));
    }
}
export default BlameTooltip;
//# sourceMappingURL=data:application/json;base64,