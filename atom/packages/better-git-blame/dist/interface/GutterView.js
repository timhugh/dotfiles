'use babel';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Range } from 'atom';
import _ from 'lodash';
import * as childProcess from 'child_process';
import GutterItem from './GutterItem';
import { colorScale } from './ColourScale';
import * as GitData from '../data/GitData';
import CodeSelector from '../stepsize/CodeSelector';
import * as ConfigManager from '../ConfigManager';
import * as Analytics from '../stepsize/Analytics';
import * as IntegrationNotification from '../interface/IntegrationNotification';
class GutterView {
    constructor(editor, outgoing) {
        this.previousResize = 0;
        this.markers = {};
        this.highlightDecorations = [];
        this.editor = editor;
        this.outgoing = outgoing;
        this.gutter = this.editor.addGutter({ name: 'layer' });
        this.setGutterWidth(ConfigManager.get('defaultWidth'));
        this.boundResizeListener = this.resizeListener.bind(this);
        this.codeSelector = new CodeSelector(this.editor);
        GitData.getRepoRootPath(this.editor.getPath())
            .then(repoRootPath => GitData.getRepoMetadata(repoRootPath))
            .then(metadata => (this.anonymousRepoMetadata = Analytics.anonymiseRepoMetadata(metadata)))
            .then(() => this.fetchGutterData())
            .then(() => this.drawGutter())
            .then(() => {
            Analytics.track('Gutter shown', this.anonymousRepoMetadata);
            IntegrationNotification.handleGutterShown();
        })
            .catch(err => console.error(err));
        return this;
    }
    toggle() {
        if (this.gutter.isVisible()) {
            this.gutter.hide();
            Analytics.track('Gutter hidden', this.anonymousRepoMetadata);
        }
        else {
            this.gutter.show();
            Analytics.track('Gutter shown', this.anonymousRepoMetadata);
            IntegrationNotification.handleGutterShown();
        }
    }
    buildMarkersForRanges() {
        for (const identifier in this.ranges) {
            const ranges = this.ranges[identifier];
            this.markers[identifier] = ranges.map(range => this.editor.markBufferRange(range.toAtomRange()));
        }
    }
    drawGutter() {
        this.buildMarkersForRanges();
        for (const identifier in this.markers) {
            const commit = this.commits[identifier];
            const date = commit.commitedAt;
            const commitDay = Math.floor((date - this.firstCommitDate.getTime()) / 1000 / 3600 / 24);
            colorScale(this.editor).then(scale => {
                const markers = this.markers[identifier];
                for (const i in markers) {
                    const marker = markers[i];
                    const item = new GutterItem({
                        commit,
                        commitDay: commitDay,
                        firstCommitDate: this.firstCommitDate,
                    });
                    this.handleResizes(item);
                    item.setIndicator('#3b3b3b'); // Set default indicator colour to display if calculations take a while
                    if (scale[commitDay]) {
                        const color = scale[Math.floor(commitDay)]
                            .rgb()
                            .fade(0.2)
                            .string();
                        item.setIndicator(color);
                    }
                    this.editor.decorateMarker(marker, {
                        type: 'gutter',
                        class: `layer-gutter`,
                        gutterName: 'layer',
                        item: item.element(),
                    });
                    item.emitter.on('mouseEnter', () => {
                        this.highlightCommit(identifier);
                        this.handleLayerSearch(item, marker);
                    });
                    item.emitter.on('mouseLeave', () => {
                        this.removeHighlight();
                        this.removeOverlayOverflowHack();
                    });
                }
            });
        }
    }
    handleResizes(item) {
        item.resizeEmitter.on('resizeHandleDragged', this.boundResizeListener);
        item.resizeEmitter.on('resizeHandleReleased', () => {
            this.previousResize = 0;
        });
    }
    searchInLayerClickHandler(codeFold) {
        return () => {
            Analytics.track('Search in Layer clicked');
            const range = new Range([codeFold.start, 0], [codeFold.end + 1, 0]);
            const event = this.outgoing.buildEvent(this.editor, [range], 'selection', true);
            this.outgoing.send(event, () => {
                childProcess.exec('open -a Layer');
            });
        };
    }
    handleLayerSearch(item, marker) {
        const codeFold = this.codeSelector.getFoldForRange(marker.getBufferRange());
        if (codeFold) {
            item.emitter.on('clickedSearch', _.debounce(this.searchInLayerClickHandler(codeFold), 250, {
                leading: true,
            }));
            item.emitter.on('mouseEnterLayerSearch', () => {
                this.removeHighlight();
                this.highlightMarker(codeFold.marker);
            });
            item.emitter.on('mouseLeaveLayerSearch', () => {
                this.removeHighlight();
            });
        }
    }
    highlightCommit(commitHash, labelContent = `<span class="icon icon-git-commit"></span><span class="highlight-label">${commitHash.substr(0, 6)}</span>`, customClasses = '') {
        const markers = this.markers[commitHash];
        if (!markers)
            return;
        for (const i in markers) {
            const marker = markers[i];
            const decoration = this.editor.decorateMarker(marker, {
                type: 'line',
                class: `line-highlight layer-highlight ${customClasses}`,
            });
            this.highlightDecorations.push(decoration);
            if (ConfigManager.get('displayHighlightLabels')) {
                const label = document.createElement('div');
                label.style['width'] = '100%';
                label.style['height'] = '19px';
                label.style['opacity'] = '0.5';
                label.innerHTML = labelContent;
                const labelDecoration = this.editor.decorateMarker(marker, {
                    type: 'overlay',
                    class: 'label-highlight',
                    position: 'tail',
                    avoidOverflow: false,
                    item: label,
                });
                this.highlightDecorations.push(labelDecoration);
            }
        }
    }
    overlayOverflowHack() {
        this.overlayHack = document.createElement('style');
        document.head.appendChild(this.overlayHack);
        this.overlayHack.innerHTML = `
      .tab-bar, .status-bar {
        z-index: 6;
      }
    `;
    }
    removeOverlayOverflowHack() {
        if (this.overlayHack) {
            this.overlayHack.remove();
        }
    }
    highlightMarker(marker) {
        this.highlightDecorations.map(decoration => decoration.destroy());
        this.highlightDecorations.push(this.editor.decorateMarker(marker, {
            type: 'line',
            class: 'line-highlight layer-highlight',
        }));
    }
    removeHighlight() {
        this.highlightDecorations.map(decoration => decoration.destroy());
    }
    resizeListener(resizeOffset) {
        this.setGutterWidth(this.width + (resizeOffset - this.previousResize));
        this.previousResize = resizeOffset;
    }
    static gutterStyle() {
        const sheet = document.createElement('style');
        sheet.type = 'text/css';
        sheet.id = 'layer-gutter-style';
        return sheet;
    }
    setGutterWidth(width) {
        this.width = Math.max(50, Math.min(width, 500));
        let sheet = document.getElementById('layer-gutter-style');
        if (!sheet) {
            sheet = GutterView.gutterStyle();
            document.head.appendChild(sheet);
        }
        sheet.innerHTML = `
      atom-text-editor .gutter[gutter-name="layer"] {
        width: ${this.width}px
      }
    `;
    }
    fetchGutterData() {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = this.editor.getPath();
            let commits = yield GitData.getCommitsForFile(filePath);
            this.commits = commits.commits;
            let ranges = yield GitData.getGutterRangesForFile(filePath);
            this.ranges = ranges.ranges;
            let date = yield GitData.getFirstCommitDateForRepo(filePath);
            this.firstCommitDate = new Date(date);
        });
    }
}
export default GutterView;
//# sourceMappingURL=data:application/json;base64,